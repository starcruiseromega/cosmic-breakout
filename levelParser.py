from datetime import datetime
import os
import pygame
import sys

AUTOGEN_FORMAT = """\
/* This file was autogenerated by '%s' on %s from the directory '%s'.
 */
"""
COMMENT_FORMAT = """\
/* Level %s
 * Score: %s
 * %s
 * %s
 * %s
 * %s
 * %s
 * %s
 * %s
 * %s
 */
"""
COLORS = {	0xffffff: 0, # White
		0xdddddd: 1, # Light gray
		0xc3c3c3: 2, # 25% gray
		0x7f7f7f: 3, # 50% gray
		0x000000: 4, # Black
		0xed1c24: 5, # Red
	}
SYMBOLS = [" ", "-", "*", "%", "X", "#"]

if __name__ == "__main__":
	if len(sys.argv) != 3:
		print "Usage: levelParser LEVEL_DIR COLOR_FILE"
		sys.exit(-1)
	totalScore = 0
	directory = sys.argv[1]
	colorSample = sys.argv[2]
	surf = pygame.image.load(colorSample)
	pixels = pygame.PixelArray(surf)
	width = pixels.surface.get_width()
	for x in xrange(0, width):
		COLORS[pixels[x, 0]] = x
	rightNow = datetime.now().strftime("%d %B %Y at %H:%M")
	cHeader = AUTOGEN_FORMAT % (__file__, rightNow, directory)
	allLevels = "const char** LEVEL_PATTERNS[] = {"
	levelCounter = 0
	for levelFile in os.listdir(directory):
		levelScore = 0
		level, ext = levelFile.split(".")
		if ext == "db":
			print "Ignore stupid Windows thumbnail cache"
			continue
		levelCounter += 1
		levelVars = "const char* %s[] = {" % level
		allLevels += "%s, " % level
		surf = pygame.image.load(os.path.join(directory, levelFile))
		pixels = pygame.PixelArray(surf)
		width = pixels.surface.get_width()
		height = pixels.surface.get_height()
		if height != 8 or width != 12:
			print "Yikes! The brick definition in %s is an odd shape" % fileName
			print "Width: %s Height: %s" % (width, height)
			sys.exit(-1)
		commentDrawing = ["", "", "", "", "", "", "", ""]
		componentRows = ""
		for y in xrange(0, 8):
			variable = "%s_row%d" % (level, y)
			cString = "const char %s[] = LEVEL_ROW(" % variable
			levelVars += "%s, " % variable
			for x in xrange(0, 12):
				brick = COLORS.get(pixels[x,y])
				if brick is None:
					print "Unknown color: %s" % hex(pixels[x,y])
					sys.exit(-1)
				if brick:
					levelScore += brick * 100 + 50
				commentDrawing[y] += SYMBOLS[brick]
				cString += "%s, " % brick
			cString = cString[:-2] # Get rid of last ", "
			cString += ");\n"
			componentRows += cString
		print "%s: %s" % (level, levelScore)
		totalScore += levelScore
		print "    Total: %s" % totalScore
		cHeader += COMMENT_FORMAT % ((levelCounter, levelScore) + tuple(commentDrawing))
		cHeader += componentRows
		levelVars = levelVars[:-2]
		levelVars += "};\n\n"
		cHeader += levelVars
	print "\nTotal Score: %s" % totalScore
	allLevels = allLevels[:-2]
	allLevels += "};\n"
	cHeader += allLevels
	cHeader += "#define LAST_LEVEL %d" % levelCounter
	with open("level.h", "w") as fileHandle:
		fileHandle.write(cHeader)
