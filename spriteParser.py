from datetime import datetime
import os
import pygame
import sys

AUTOGEN_FORMAT = """\
/* This file was autogenerated by '%s' on %s from the directory '%s'.
 */
"""
COMMENT_FORMAT = """\
/* %s
 * %s
 * %s
 * %s
 * %s
 * %s
 * %s
 * %s
 */
"""

if __name__ == "__main__":
	if len(sys.argv) != 2:
		print "Usage: spriteParser SPRITE_DIRECTORY"
	directory = sys.argv[1]
	rightNow = datetime.now().strftime("%d %B %Y at %H:%M")
	cHeader = AUTOGEN_FORMAT % (__file__, rightNow, directory)
	widthDefines = dict()
	for aDir in os.listdir(directory):
		caseVariable = aDir
		dirName = os.path.join(directory, aDir)
		if not os.path.isdir(dirName):
			print "Ignoring %s" % dirName
			continue
		caseVars = "const uint8_t* %s[] = {" % caseVariable
		caseWidth = None
		define = caseVariable[:-7].upper() # Remove "sprites" or "bottoms"
		for fontFile in os.listdir(dirName):
			variable, ext = fontFile.split(".")
			if ext == "db":
				print "Ignore stupid Windows thumbnail cache"
				continue
			cString = "const uint8_t %s[] = {" % variable
			caseVars += "%s, " % variable
			fileName = os.path.join(dirName, fontFile)
			surf = pygame.image.load(fileName)
			pixels = pygame.PixelArray(surf)
			width = pixels.surface.get_width()
			if caseWidth is not None and width != caseWidth:
				print "One of these sprites is a different width: %s %spx" % (fontFile, width)
			if caseWidth is None:
				caseWidth = width
			height = pixels.surface.get_height()
			if height != 8:
				print "Yikes! The sprite in %s takes up more than a page!" % fileName
				sys.exit(-1)
			commentDrawing = ["", "", "", "", "", "", "", ""]
			for x in xrange(0, width):
				binaryString = ""
				for y in xrange(height - 1, -1, -1):
					if pixels[x, y]:
						binaryString += "0"
						commentDrawing[y] += "_"
					else:
						binaryString += "1"
						commentDrawing[y] += "W"
				cString += "%s, " % hex(int(binaryString, 2))
			curWidth = widthDefines.get(define)
			if curWidth and curWidth != caseWidth:
				print "Top and bottom not equal widths"
			widthDefines[define] = caseWidth
			cHeader += COMMENT_FORMAT % tuple(commentDrawing)
			cString = cString[:-2] # Get rid of last ", "
			cString += "};\n\n"
			cHeader += cString
		caseVars = caseVars[:-2]
		caseVars += "};\n"
		cHeader += caseVars
		for name, num in widthDefines.iteritems():
			cHeader += "#define %s_WIDTH %d\n" % (name, num)
	with open("sprites.h", "w") as fileHandle:
		fileHandle.write(cHeader)
